// Code generated by mockery v2.43.2. DO NOT EDIT.

package converter

import (
	image "image"

	mock "github.com/stretchr/testify/mock"
)

// pdfScannerMock is an autogenerated mock type for the pdfScanner type
type pdfScannerMock struct {
	mock.Mock
}

// Scan provides a mock function with given fields: path
func (_m *pdfScannerMock) Scan(path string) ([]image.Image, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Scan")
	}

	var r0 []image.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]image.Image, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) []image.Image); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]image.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newPdfScannerMock creates a new instance of pdfScannerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newPdfScannerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *pdfScannerMock {
	mock := &pdfScannerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
